def evaluate_expression(expression):
    # Define operator precedence
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    
    def apply_operator(operators, values):
        operator = operators.pop()
        right_operand = values.pop()
        left_operand = values.pop()
        
        if operator == '+':
            values.append(left_operand + right_operand)
        elif operator == '-':
            values.append(left_operand - right_operand)
        elif operator == '*':
            values.append(left_operand * right_operand)
        elif operator == '/':
            values.append(left_operand / right_operand)

    def shunting_yard(expression):
        operators = []
        values = []
        i = 0

        while i < len(expression):
            if expression[i].isdigit():
                j = i
                while j < len(expression) and expression[j].isdigit():
                    j += 1
                values.append(int(expression[i:j]))
                i = j
            elif expression[i] in precedence:
                while operators and precedence[operators[-1]] >= precedence[expression[i]]:
                    apply_operator(operators, values)
                operators.append(expression[i])
                i += 1
            elif expression[i] == '(':
                operators.append('(')
                i += 1
            elif expression[i] == ')':
                while operators[-1] != '(':
                    apply_operator(operators, values)
                operators.pop()
                i += 1
            else:
                i += 1

        while operators:
            apply_operator(operators, values)

        return values[0]

    return shunting_yard(expression)

# Example usage
expression = "3 + 4 * 2 / (1 - 5)"
result = evaluate_expression(expression)
print("Result:", result)
